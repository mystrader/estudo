/*
Grid Responsivo com base no RESPONSIVE GRID SYSTEM de DENIS LEBLANC ( http://responsive.gs )
////////////////////////////////////////////////////////////////////////////////////////////
DESENVOLVIDO POR: estudio PICTUS - ESTUDIOPICTUS.COM.BR
DATA: SETEMBRO 2013
VERS√ÉO : 1.0
////////////////////////////////////////////////////////////////////////////////////////////

<!-- How it Works -->

<div class="row"></div>
<!-- Add this class to any element that spans the entire width of your 'container' to clear any floating child or 'col' elements. Also allows you to define spacing between rows, or add borders, etc. Using this class alone does not add gutters to 'col' elements. -->

<div class="row gutters"></div>
<!-- Using these two classes together works the same as described above and adds gutters to 'col' elements within. If you don't need gutters then just use the 'row' class on its own. -->

<div class="col grid4"></div>
<!-- The 'col' class defines each column within a 'row' and the 'grid' classes define the width of each particular column. These are used together as child elements of a 'row'. On smaller devices these elements will stack vertically unless defined otherwise in media queries. -->

<div class="clr"></div>
<!-- Add this class to any element to clear its floating children. Also, 'container', 'row' and 'col' will clear floats by default. (aka - clearfix method) -->
*/

/* 	SET ALL ELEMENTS TO BOX-SIZING : BORDER-BOX */
* { 
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
	/**behavior: url(/scripts/boxsizing.htc); */
	/*	If you need support for IE7 and lower make 
		sure the boxsizing.htc file is linked properly.
		More info here:  https://github.com/Schepp/box-sizing-polyfill */
}

/*	SELF CLEARING FLOATS - CLEARFIX METHOD */
.row:after, .col:after, .clr:after, .group:after { 
	content: " "; 
	display: table; 
	clear: both; 
}
.row:before, .col:before, .clr:before, .group:before {
	content: " ";
	display: table;
}
.row, .col, .clr, .group { *zoom: 1; }

/* 	DEFAULT BLOCK STYLES 
	Set padding and max-width according to preference */
.row {
	/*max-width: 1140px; 
	min-width: 1140px;*/
	width: 1140px;
	margin: 0 auto;
	padding-left: 1.5%;
	padding-right: 1.5%;

	-webkit-box-sizing: content-box;
	-moz-box-sizing: content-box;
	box-sizing: content-box;
}											  

/* DEFAULT COLUMN STYLES */
.col { 
	display: block;
	float: left;
	width: 100%;
}

.gutters .col { margin-left: 2%; }
.gutters .col:first-child { margin-left: 0; }

.grid1 { width: 8.33333333333%; }
.grid2 { width: 16.6666666667%; }
.grid3 { width: 25%; }
.grid4 { width: 33.3333333333%; }
.grid5 { width: 41.6666666667%; }
.grid6 { width: 50%; }
.grid7 { width: 58.3333333333%; }
.grid8 { width: 66.6666666667%; }
.grid9 { width: 75%; }
.grid10 { width: 83.3333333333%; }
.grid11 { width: 91.6666666667%; }
.grid12 { width: 100%; }

.gutters .grid1 { width: 6.5%; }
.gutters .grid2 { width: 15.0%; }
.gutters .grid3 { width: 23.5%; }
.gutters .grid4 { width: 32.0%; }
.gutters .grid5 { width: 40.5%; }
.gutters .grid6 { width: 49.0%; }
.gutters .grid7 { width: 57.5%; }
.gutters .grid8 { width: 66.0%; }
.gutters .grid9 { width: 74.5%; }
.gutters .grid10 { width: 83.0%; }
.gutters .grid11 { width: 91.5%; }
.gutters .grid12 { width: 100%; }

/*	COLUMN WIDTH ON DISPLAYS 568px- 
	You might need to play with media queries here to suite your design. */
@media only screen and (max-width: 568px) {
	.grid1,
	.grid2,
	.grid3,
	.grid4,
	.grid5,
	.grid6,
	.grid7,
	.grid8,
	.grid9,
	.grid10,
	.grid11,
	.grid12,
	.gutters .grid1,
	.gutters .grid2,
	.gutters .grid3,
	.gutters .grid4,
	.gutters .grid5,
	.gutters .grid6,
	.gutters .grid7,
	.gutters .grid8,
	.gutters .grid9,
	.gutters .grid10,
	.gutters .grid11,
	.gutters .grid12 {
		display: block;
		float: left;
		width: 100%;
	}
}


