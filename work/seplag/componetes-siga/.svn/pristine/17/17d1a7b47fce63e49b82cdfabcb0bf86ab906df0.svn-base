//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
  margin: 0 0 $padding-large-vertical;
    
    > legend {
        @extend label;
        margin-bottom: $padding-base-vertical;
        font-size: $font-size-large;
    }
    
    .input-group { 
        &:last-child {
            margin-bottom: 0;
        }
        
        &.active {
            background-color: $info-lighter;
        }
    }
    
    &.fieldset-group {
      padding: 0;
      margin: 0 0 $padding-large-vertical;
      border: 0;

        legend {
          display: block;
          width: 100%;
          padding: 0;
          margin-bottom: $line-height-computed;
          font-size: ($font-size-base * 1.5);
          line-height: inherit;
          color: $legend-color;
          border: 0;
          border-bottom: 1px solid $legend-border-color;
        }
        .checkbox-inline {
        }
        .input-group {
            border: 1px solid $legend-border-color;
            padding: $padding-base-horizontal;
        
            .input-group {
                border-width: 0;
                padding: 0 0 0 ($padding-large-horizontal * 2);

                 label { 
                        font-weight: $font-weight-light;
                        text-transform: capitalize;
                    }
                    .input-group-title {
                        font-size: $font-size-large;
                    }
                
                .input-group-title {
                    padding: 0;
                }
                
                .input-group-header > a { 
                    //float:left; 
                    margin-left: -25px; 
                    margin-top: 10px; 
                }
                
                .checkbox-inline {
                    &.col-md-12 {
                        padding: 0;
                    }
                    
                    .btn {
                        margin-bottom: 0;
                    }
                }
                
                .collapse, .collapsing {
                    border-left: 1px solid $gray-lighter;
                    overflow: hidden;
                }
                
            }
        }
    }
    
    .alert-warning { display: none; }
    
    &.required {

        // Feedback states
        &.has-success {
          //@include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
            .alert-success { display: block; }
            > 
            > label { 
                &, & > small {
                    color: $alert-success-text;
                    }
            }
           > .form-control { background-color: lighten($success-lighter, 10%); border-color: $alert-success-border; }
        }
        &.has-warning {
         //@include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
            background-color: $warning-lighter;
            margin-bottom: $padding-large-vertical;
            
            > legend {
                padding-left: $padding-base-horizontal;
                padding-right: $padding-base-horizontal;
                background-color: $warning-lighter;
            }
            
            > .alert-warning {
                display: block;
                padding: $padding-small-horizontal;
                margin: (-$padding-base-vertical) $padding-base-horizontal $padding-base-horizontal;
                background-color: $warning-light;
            }
            .checkbox-inline:first-child {
                background-color: $warning-lighter;
                }
            > .form-control { background-color: transparent; border-color: $alert-warning-border; }
        }
        &.has-error {
          //@include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
            > .alert-error { display: block; }
            > label { 
                &, & > small {
                    color: $alert-danger-text;
                    }
                }
            > .form-control {
                background-color: lighten($danger-lighter, 10%); border-color: $alert-danger-border;
            }
        }
    }

    .tree.input-group {

        padding: 0;
        list-style: none;

        > li.tree-branch  {
                padding: $padding-base-horizontal;

            > label {
                margin-bottom: 0;
                text-transform: uppercase;
                font-weight: $font-weight-bold;

                small {
                    color: $gray-dark;
                    font-weight: $font-weight-light;
                }
            }

            > a {
                //margin-top: $padding-base-vertical;
                float: right;
                text-decoration: none;

                > span {
                    float: left;
                    display: none;
                }
                &:hover {
                    color: $gray-dark;
                    > span { display: block; }
                }
            }
        }
        
        
        li {
            .tree-item {

                width: 100%;
                text-align: left;
                cursor: default;
                padding: $padding-base-vertical $padding-base-horizontal;
                @include transition(all, ease-in-out, .25s);
                
                &:last-child {
                    margin-bottom: 0;
                }

                > label {
                    cursor: pointer;
                    margin-bottom: 0;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    line-height: 0.83em;
                }

                > input {
                    margin-right: $padding-base-horizontal;
                }
                
            }

            ul {
                list-style: none;
                border-left: 1px solid $gray-lighter;
                padding-left: 0;
                margin-left: $padding-small-horizontal;
            }
            
            .tree-branch {
                margin-bottom: $padding-base-vertical;
                padding: $padding-base-vertical 0 $padding-base-vertical $padding-base-horizontal;
                
                &:first-child {
                    margin-bottom: 0;
                }
                
                &:last-child {
                    padding-bottom: 0;
                    margin-bottom: 0;
                }
                
                + .tree-branch {
                    padding-top: $padding-base-vertical;
                    margin-bottom: 0;
                }

                > .caret {
                        -moz-transform: rotate(270deg);
                        -webkit-transform: rotate(270deg);
                        -o-transform: rotate(270deg);
                        -ms-transform: rotate(270deg);
                        transform: rotate(270deg);

                    &.collapsed {
                        -moz-transform: rotate(0deg);
                        -webkit-transform: rotate(0deg);
                        -o-transform: rotate(0deg);
                        -ms-transform: rotate(0deg);
                        transform: rotate(0deg);
                    }
                }
            }

            + .tree-branch {
                margin-top: 0;
            }
        }

        .active {
            background-color: $info-lighter;
        }

        &.tree-inline {
            li.tree-branch  {
                
                .collapse, .collapsing {
                
                    overflow: hidden;
                    border-left: none;

                     li.tree-item {
                        width: 33.33333% !important;
                        float: left;
                    }
                }
            }
        }
    }
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: $font-weight-base;
  color: $info-dark;
    &.h4 {
        margin-top: 0;
        line-height: 1em;
    }
    
    .badge & {
        margin:0;
    }
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus;
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;

  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  @include transition(all ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;

  // Placeholder
  @include placeholder;

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
    border: none;
    outline: none;
  }

    
    &[readonly], &[disabled] {

        font-size: $font-size-base;
        color: $gray-darker;
        background-color: $light;
        opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
        border: none;
        outline: none;
        box-shadow: none;
        
        &.input-lg { font-size:$font-size-h3; padding: 0 0 0 $padding-base-horizontal; }
  }
    
  &[disabled],
  fieldset[disabled] & {
    //cursor: $cursor-disabled;
  }

  // [converter] extracted textarea& to textarea.form-control
    
    &.h3 {
        font-size: $font-size-h3;
        margin: 0;
    }
    
    &.h5 {
        font-size: $font-size-h5;
        margin: 0;
    }
    
}

.fake-form-control {
    border: 1px solid $input-border;
    padding: 0;
    overflow:visible;
    @include transition(all ease-in-out .15s);

    &.tagbox {
        
        .form-control:focus{
            border: none;
            box-shadow: none;
            }
    }

    
    .input-group {
        margin-bottom: 0;
        border-bottom: 1px solid $gray-lighter;
    }
    
    .input-group-btn {
        width: 0;
        
        .btn {
            padding: ($padding-base-horizontal + 1) $padding-base-horizontal ($padding-base-horizontal + 2) 0;
            border: 0;
            border-left: $padding-base-horizontal solid transparent;
            
            &:hover {
                border-left: $padding-base-horizontal solid $info-lighter;
                color: $gray-darker;
                
            }
            
        }
    }
    
    .form-control {
      overflow:auto;
      border: none;

        &:focus {
          border: 1px solid $info-dark;
          outline: none;
          outline-bottom: 1px solid $info-dark;
        }
    }
    
    [data-relation] & {
        .form-control[type="text"], .form-control[type="number"] {
            margin-bottom: 0;
            padding: $padding-small-vertical $padding-base-horizontal;
            height: $padding-large-vertical * 3;
        }
        
        .form-control[type="text"], .form-control[type="number"], select[multiple].form-control {
            &:focus{
                border: none;
                outline: none;
                box-shadow: none;
            }
            
        }
        
    }

    
}

select.form-control {

    &[readonly], &[disabled]  {
        border: 1px solid $gray-lighter;
    }

}
    

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 8.3, iOS doesn't support `datetime` or `week`.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    &.form-control {
      line-height: $input-height-base;
    }

    &.input-sm,
    .input-group-sm & {
      line-height: $input-height-small;
    }

    &.input-lg,
    .input-group-lg & {
      line-height: $input-height-large;
    }
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  //margin-bottom: $form-group-margin-bottom;
  //padding: $padding-base-vertical $padding-base-horizontal;
  overflow: hidden;

    .input-group {
        width: 100%;

        > .form-control {
          

            // Make multiple select elements height not fixed
            &[multiple],
            &[size] {
              height: auto;
              max-height: 200px;
              overflow-y: auto;
            }

        }

         .input-group-btn > .btn {
            position: absolute;
            right: 0;
            top: 0;
            &:hover {
                background-color: $info-lighter;
            }
        }

         .input-group-btn > ul {
             padding: 0;
             margin: 0;
        }
        
    }

   div > .input-group > textarea.form-control,
   div > .input-group > select[multiple].form-control {
    height: auto;
    min-height: 460px;
  }
    
    div > .input-group > .form-control.chat {
        
        min-height: 0;
        
        &.chat-history {
            position: relative;
            height: 460px;
            overflow-y: scroll;
            overflow-x: hidden;
            
            &::-webkit-scrollbar {
                width: 5px;
                background-color: $gray-darker;
                @include transition(all ease-in-out 0.15s);
            }

        //    &:hover {
        //        &::-webkit-scrollbar {
        //            width: 15px;
        //            @include transition(all ease-in-out 0.15s);
        //        }
        //        
        //    }
            &::-webkit-scrollbar-thumb {
                background-color: $light;
            }
            
            > .chat-msg {
                width: 100%;
                padding: $padding-base-vertical $padding-base-horizontal;
                overflow: hidden;
                
                > div {

                    &.my-msg {
                        width: 66.66667%;
                        float: right;
                        background-color: lighten($info-lighter, 7%);
                        margin: $padding-base-vertical 0;
                        padding: $padding-base-vertical $padding-base-horizontal;
                        @include box-shadow(3px 3px 5px rgba(0, 0, 0, 0.15));

                        .caret {
                            border-left: 10px dashed lighten($info-lighter, 7%);
                            border-left: 10px solid \9;
                            border-top: 10px solid transparent;
                            border-bottom: 10px solid transparent;
                            top: 0;
                            left: 100%;
                        
                        }
                        
                    }
                    
                    &.other-msg {
                        width: 66.66667%;
                        float: left;
                        background-color: lighten($gray-lighter, 7%);
                        margin: $padding-base-vertical 0;
                        padding: $padding-base-vertical $padding-base-horizontal;
                        
                        .caret {
                           
                            border-right: 10px dashed lighten($gray-lighter, 7%);
                            border-right: 7px solid \9;
                            border-top: 7px solid transparent;
                            border-bottom: 7px solid transparent;
                            top: 0;
                            right: 100%;
                        }
                        
                    }
                    
                    > .caret {
                        position: absolute;
                        
                    }
                    
                }
                
            }
            
        }
    }
    

}

.detalhamento {
    label {
        small {
            display: none;
        }
    }
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: $padding-base-vertical;
  margin-bottom: $padding-base-vertical;

  label {
    min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: default;
}

.input-group {
    
    @include transition(all, ease-in-out, .25s);
        
    .active {
        background-color: $info-lighter;
    }
    
    .active {
        .active { background-color: transparent; }
    }
    
}
    
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  //margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  &[disabled],
    fieldset[disabled] & {
      display: none;
    label {
      cursor: $cursor-disabled;
    }
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  // Size it appropriately next to real form controls
  padding-top: ($padding-base-vertical + 1);
  padding-bottom: ($padding-base-vertical + 1);
  // Remove default margin from `p`
  margin-bottom: 0;
  min-height: ($line-height-computed + $font-size-base);

  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $input-border-radius);
.form-group-sm {
  .form-control {
    height: $input-height-small;
    padding: $padding-small-vertical $padding-small-horizontal;
    font-size: $font-size-small;
    line-height: $line-height-small;
    border-radius: $input-border-radius;
  }
  select.form-control {
    height: $input-height-small;
    line-height: $input-height-small;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    height: $input-height-small;
    min-height: ($line-height-computed + $font-size-small);
    padding: ($padding-small-vertical + 1) $padding-small-horizontal;
    font-size: $font-size-small;
    line-height: $line-height-small;
  }
}

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $input-border-radius-large);
.form-group-lg {
  .form-control, .fake-form-control {
    height: $input-height-large;
    padding: $padding-large-vertical $padding-large-horizontal;
    font-size: $font-size-large;
    line-height: $line-height-large;
    border-radius: $input-border-radius-large;
  }
  
    .fake-form-control {
        padding: 0;
    }
  
 select.form-control, select.fake-form-control {
    height: $input-height-large;
    line-height: $input-height-large;
  }
  .form-control-static {
    height: $input-height-large;
    min-height: ($line-height-computed + $font-size-large);
    padding: ($padding-large-vertical + 1) $padding-large-horizontal;
    font-size: $font-size-large;
    line-height: $line-height-large;
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control, .fake-form-control {
    padding-right: ($input-height-base * 1.25);
  }
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: $input-height-base;
  height: $input-height-base;
  line-height: $input-height-base;
  text-align: center;
  pointer-events: none;
}
.input-lg + .form-control-feedback,
.input-group-lg + .form-control-feedback,
.form-group-lg .form-control + .form-control-feedback {
  width: $input-height-large;
  height: $input-height-large;
  line-height: $input-height-large;
}
.input-sm + .form-control-feedback,
.input-group-sm + .form-control-feedback,
.form-group-sm .form-control + .form-control-feedback {
  width: $input-height-small;
  height: $input-height-small;
  line-height: $input-height-small;
}

.input-group.required {

    // Feedback states
    &.has-success {
      //@include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
        .alert-success { display: block; }
        > 
        > label { 
            &, & > small {
                color: $alert-success-text;
                }
        }
       > .form-control { background-color: lighten($success-lighter, 10%); border-color: $alert-success-border; }
    }
    &.has-warning {
     //@include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
        background-color: $warning-lighter;
        padding: $padding-base-horizontal;
        > .alert-warning { display: block; padding: 0; float:right;}
        > label { 
            &, & > small {
                color: $alert-warning-text;
                }
            }
        > .form-control { background-color: transparent; border-color: $alert-warning-border; }
    }
    &.has-error {
      //@include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
        > .alert-error { display: block; }
        > label { 
            &, & > small {
                color: $alert-danger-text;
                }
            }
        > .form-control { background-color: lighten($danger-lighter, 10%); border-color: $alert-danger-border; }
    }
    
    // Reposition feedback icon if input has visible label above
    &.has-feedback label {

      & ~ .form-control-feedback {
         top: ($line-height-computed + 5); // Height of the `label` and its margin
      }
      &.sr-only ~ .form-control-feedback {
         top: 0;
      }
    }
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($text-color, 25%); // lighten the text some for contrast
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

// [converter] extracted from `.form-inline` for libsass compatibility
@mixin form-inline {

  // Kick in the inline
  @media (min-width: $screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
    
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;

    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}
// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;
}



// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: ($padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: ($line-height-computed + ($padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include clearfix;
      padding-left: $padding-base-horizontal; 
      padding-right: $padding-base-horizontal; 
      margin-bottom: 0;
      
      &:last-child {
      border-bottom: none;
        }
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      padding-left: 0;
      padding-right: 0;
      padding-top: ($padding-base-vertical + 1); // Default padding plus a border

    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: floor(($grid-gutter-width / 2));
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: (($padding-large-vertical * $line-height-large) + 1);
        font-size: $font-size-large;
      }
    }
  }
  .form-group-sm {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: ($padding-small-vertical + 1);
        font-size: $font-size-small;
      }
    }
  }
}

.control-label {
        
      &.h6 {
          font-size: $font-size-h6;
          font-weight: 300;
      }
}
